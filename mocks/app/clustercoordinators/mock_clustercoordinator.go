// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rudderlabs/rudder-server/app/clustercoordinators (interfaces: ClusterManagerFactory,ClusterManager)

// Package mock_clustercoordinator is a generated GoMock package.
package mock_clustercoordinator

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	clustercoordinator "github.com/rudderlabs/rudder-server/app/clustercoordinators"
)

// MockClusterManagerFactory is a mock of ClusterManagerFactory interface.
type MockClusterManagerFactory struct {
	ctrl     *gomock.Controller
	recorder *MockClusterManagerFactoryMockRecorder
}

// MockClusterManagerFactoryMockRecorder is the mock recorder for MockClusterManagerFactory.
type MockClusterManagerFactoryMockRecorder struct {
	mock *MockClusterManagerFactory
}

// NewMockClusterManagerFactory creates a new mock instance.
func NewMockClusterManagerFactory(ctrl *gomock.Controller) *MockClusterManagerFactory {
	mock := &MockClusterManagerFactory{ctrl: ctrl}
	mock.recorder = &MockClusterManagerFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterManagerFactory) EXPECT() *MockClusterManagerFactoryMockRecorder {
	return m.recorder
}

// New mocks base method.
func (m *MockClusterManagerFactory) New(arg0 string) (clustercoordinator.ClusterManager, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", arg0)
	ret0, _ := ret[0].(clustercoordinator.ClusterManager)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// New indicates an expected call of New.
func (mr *MockClusterManagerFactoryMockRecorder) New(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockClusterManagerFactory)(nil).New), arg0)
}

// MockClusterManager is a mock of ClusterManager interface.
type MockClusterManager struct {
	ctrl     *gomock.Controller
	recorder *MockClusterManagerMockRecorder
}

// MockClusterManagerMockRecorder is the mock recorder for MockClusterManager.
type MockClusterManagerMockRecorder struct {
	mock *MockClusterManager
}

// NewMockClusterManager creates a new mock instance.
func NewMockClusterManager(ctrl *gomock.Controller) *MockClusterManager {
	mock := &MockClusterManager{ctrl: ctrl}
	mock.recorder = &MockClusterManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterManager) EXPECT() *MockClusterManagerMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockClusterManager) Get(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockClusterManagerMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClusterManager)(nil).Get), arg0, arg1)
}

// Put mocks base method.
func (m *MockClusterManager) Put(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockClusterManagerMockRecorder) Put(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockClusterManager)(nil).Put), arg0, arg1, arg2)
}

// Watch mocks base method.
func (m *MockClusterManager) Watch(arg0 context.Context, arg1 string) chan interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", arg0, arg1)
	ret0, _ := ret[0].(chan interface{})
	return ret0
}

// Watch indicates an expected call of Watch.
func (mr *MockClusterManagerMockRecorder) Watch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockClusterManager)(nil).Watch), arg0, arg1)
}

// WatchForWorkspaces mocks base method.
func (m *MockClusterManager) WatchForWorkspaces(arg0 context.Context, arg1 string) chan string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchForWorkspaces", arg0, arg1)
	ret0, _ := ret[0].(chan string)
	return ret0
}

// WatchForWorkspaces indicates an expected call of WatchForWorkspaces.
func (mr *MockClusterManagerMockRecorder) WatchForWorkspaces(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchForWorkspaces", reflect.TypeOf((*MockClusterManager)(nil).WatchForWorkspaces), arg0, arg1)
}
